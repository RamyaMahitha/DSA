#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node *left;
    Node *right;
 Node(int val){
     this->data=val;
     this->left=NULL;
     this->right=NULL;
 }    
};
class Tree{
    public:
    Node *root=NULL;
    
      Node *create_insert_node(Node*root,int val){
        if(root==NULL){
            return new Node(val);
        }
        else if(val<root->data){
            root->left=create_insert_node(root->left,val);
            
        }
        else{
            root->right=create_insert_node(root->right,val);
        }
        return root;
    }
    void insert(int val){
            root=create_insert_node(root,val);
        }
    void level(){
            level_order(root);
     }
    void level_order(Node *root){
        queue <Node*> q;
      if(root==NULL)
          return;
        q.push(root);
        while(!q.empty()){
        int size=q.size();
        for(int i=0;i<size;i++){
            Node *temp=q.front();
            cout<<temp->data<<" ";
            if(temp->left!=NULL){
                q.push(temp->left);
            }
            if(temp->right!=NULL){
                q.push(temp->right);
            }
            q.pop();
        }
        cout<<endl;
    }
}
       
    
    
};
int main(){
    int i,t,n,value;
    cin>>t;
    while(t--){
        cin>>n;
         Tree bst;
        for(i=0;i<n;i++){
            cin>>value;
        bst.insert(value);
        }
        bst.level();
        cout<<endl;
    }
    
}

     
    