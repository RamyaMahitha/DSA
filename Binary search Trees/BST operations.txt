#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node *left;
    Node *right;
 Node(int val){
     this->data=val;
     this->left=NULL;
     this->right=NULL;
 }    
};
class Tree{
    public:
    Node *root=NULL;
    
      Node *create_insert_node(Node*root,int val){
        if(root==NULL){
            return new Node(val);
        }
        else if(val<root->data){
            root->left=create_insert_node(root->left,val);
            
        }
        else{
            root->right=create_insert_node(root->right,val);
        }
        return root;
    }
    void insert(int val){
            root=create_insert_node(root,val);
        }
    void pre(){
        pre_order(root);
    }
    void pre_order(Node *root){
         if(root==NULL){
             return;
         }
         cout<<root->data<<" ";
         pre_order(root->left);
         pre_order(root->right);
     }
     
    void delete_node(int target){
       root= deletionBst(root,target);
        
    }
  Node *deletionBst(Node *root,int target){
      if(!root){
        return root;
      }
      if(target<root->data){
          root->left=deletionBst(root->left,target);
          return root;
      }
      else if(target>root->data){
           root->right=deletionBst(root->right,target);
           return root;
      }
      
      if(root->left==NULL){
          Node *temp=root->right;
          delete root;
          return temp;
      }
      else if(root->right==NULL){
          Node *temp=root->left;
          delete root;
          return temp;
      }
      Node* curr=root->right;
      while(curr->left)
        curr=curr->left;
        
     root->data=curr->data;
     root->right=deletionBst(root->right,curr->data);
     return root;
      
  }
  
  void search_node(int key){
      if(search_node_in_bst(root,key))
         cout<<"Yes";
     else
      cout<<"No";
  }
  bool search_node_in_bst(Node *root,int key){
      if(root==NULL)
         return false;
      if(root->data==key)
         return true;
      if(key<root->data)
         return search_node_in_bst(root->left,key);
      if(key>root->data)
         return search_node_in_bst(root->right,key);
    return false;
          
  }
};

int main()
{
   int i,j,t,q,a1,a2;
   cin>>t;
    for( j=1;j<=t;j++){
        Tree bst;
        cout<<"Case #"<<j<<":"<<endl;
        cin>>q;
        for(i=0;i<q;i++){
            cin>>a1;
            if(a1!=4)
               cin>>a2;
            if(a1==1){
               
                bst.insert(a2);
             }
            else if(a1==2){
               
                bst.delete_node(a2);
                
             }
            else if(a1==3){
                
                bst.search_node(a2);
                cout<<endl;
             }
            else if(a1==4){
                bst.pre();
                cout<<endl;
               
             }
        }
    } 
     cout<<endl;
}
    
