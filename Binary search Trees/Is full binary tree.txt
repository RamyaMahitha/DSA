#include <bits/stdc++.h>
using namespace std;
class Node{
    public:
    int data;
    Node *left;
    Node *right;
 Node(int val){
     this->data=val;
     this->left=NULL;
     this->right=NULL;
 }    
};
class Tree{
    public:
    Node *root=NULL;
    
      Node *create_insert_node(Node*root,int val){
        if(root==NULL){
            return new Node(val);
        }
        else if(val<root->data){
            root->left=create_insert_node(root->left,val);
            
        }
        else{
            root->right=create_insert_node(root->right,val);
        }
        return root;
    }
    void insert(int val){
            root=create_insert_node(root,val);
        }
   void fbst(){
       if(fullBst(root)){
            cout<<"True";
        }
        else{
            cout<<"False";
        }
   }
 bool fullBst(Node *root){
     if (root==NULL){
       return true;
     }
     if((root->left==NULL) && (root->right==NULL)){
         return true;
     }
     else if((root->left) && (root->right)){
         return (fullBst(root->left)&&fullBst(root->right));
     }
     return false;
 }
};
int main(){
    int i,t,n,value;
    cin>>t;
    while(t--){
        cin>>n;
         Tree bst;
        for(i=0;i<n;i++){
            cin>>value;
        bst.insert(value);
        }
        bst.fbst();
        cout<<endl;
    }
    
}

     
    